// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: types.proto

package proto

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_struct "github.com/golang/protobuf/ptypes/struct"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Message to store bundle/config.json bytes
type ExtraData struct {
	JsonSpec             []byte     `protobuf:"bytes,1,opt,name=JsonSpec,json=jsonSpec,proto3" json:"JsonSpec,omitempty"`
	RuncOptions          *types.Any `protobuf:"bytes,2,opt,name=RuncOptions,json=runcOptions,proto3" json:"RuncOptions,omitempty"`
	StdinPort            uint32     `protobuf:"varint,3,opt,name=StdinPort,json=stdinPort,proto3" json:"StdinPort,omitempty"`
	StdoutPort           uint32     `protobuf:"varint,4,opt,name=StdoutPort,json=stdoutPort,proto3" json:"StdoutPort,omitempty"`
	StderrPort           uint32     `protobuf:"varint,5,opt,name=StderrPort,json=stderrPort,proto3" json:"StderrPort,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ExtraData) Reset()         { *m = ExtraData{} }
func (m *ExtraData) String() string { return proto.CompactTextString(m) }
func (*ExtraData) ProtoMessage()    {}
func (*ExtraData) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{0}
}
func (m *ExtraData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExtraData.Unmarshal(m, b)
}
func (m *ExtraData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExtraData.Marshal(b, m, deterministic)
}
func (m *ExtraData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtraData.Merge(m, src)
}
func (m *ExtraData) XXX_Size() int {
	return xxx_messageInfo_ExtraData.Size(m)
}
func (m *ExtraData) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtraData.DiscardUnknown(m)
}

var xxx_messageInfo_ExtraData proto.InternalMessageInfo

func (m *ExtraData) GetJsonSpec() []byte {
	if m != nil {
		return m.JsonSpec
	}
	return nil
}

func (m *ExtraData) GetRuncOptions() *types.Any {
	if m != nil {
		return m.RuncOptions
	}
	return nil
}

func (m *ExtraData) GetStdinPort() uint32 {
	if m != nil {
		return m.StdinPort
	}
	return 0
}

func (m *ExtraData) GetStdoutPort() uint32 {
	if m != nil {
		return m.StdoutPort
	}
	return 0
}

func (m *ExtraData) GetStderrPort() uint32 {
	if m != nil {
		return m.StderrPort
	}
	return 0
}

// Message to specify network config for a Firecracker VM
type FirecrackerNetworkInterface struct {
	AllowMMDS      bool                    `protobuf:"varint,1,opt,name=AllowMMDS,json=allowMMDS,proto3" json:"AllowMMDS,omitempty"`
	InRateLimiter  *FirecrackerRateLimiter `protobuf:"bytes,2,opt,name=InRateLimiter,json=inRateLimiter,proto3" json:"InRateLimiter,omitempty"`
	OutRateLimiter *FirecrackerRateLimiter `protobuf:"bytes,3,opt,name=OutRateLimiter,json=outRateLimiter,proto3" json:"OutRateLimiter,omitempty"`
	// CNIConfiguration specifies CNI configuration that will be used to generate
	// a network interface for a Firecracker VM.
	CNIConfig *CNIConfiguration `protobuf:"bytes,4,opt,name=CNIConfig,json=cNIConfig,proto3" json:"CNIConfig,omitempty"`
	// StaticNetworkConfiguration specifies static configuration parameters for a
	// Firecracker VM's network interface
	StaticConfig         *StaticNetworkConfiguration `protobuf:"bytes,5,opt,name=StaticConfig,json=staticConfig,proto3" json:"StaticConfig,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *FirecrackerNetworkInterface) Reset()         { *m = FirecrackerNetworkInterface{} }
func (m *FirecrackerNetworkInterface) String() string { return proto.CompactTextString(m) }
func (*FirecrackerNetworkInterface) ProtoMessage()    {}
func (*FirecrackerNetworkInterface) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{1}
}
func (m *FirecrackerNetworkInterface) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FirecrackerNetworkInterface.Unmarshal(m, b)
}
func (m *FirecrackerNetworkInterface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FirecrackerNetworkInterface.Marshal(b, m, deterministic)
}
func (m *FirecrackerNetworkInterface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirecrackerNetworkInterface.Merge(m, src)
}
func (m *FirecrackerNetworkInterface) XXX_Size() int {
	return xxx_messageInfo_FirecrackerNetworkInterface.Size(m)
}
func (m *FirecrackerNetworkInterface) XXX_DiscardUnknown() {
	xxx_messageInfo_FirecrackerNetworkInterface.DiscardUnknown(m)
}

var xxx_messageInfo_FirecrackerNetworkInterface proto.InternalMessageInfo

func (m *FirecrackerNetworkInterface) GetAllowMMDS() bool {
	if m != nil {
		return m.AllowMMDS
	}
	return false
}

func (m *FirecrackerNetworkInterface) GetInRateLimiter() *FirecrackerRateLimiter {
	if m != nil {
		return m.InRateLimiter
	}
	return nil
}

func (m *FirecrackerNetworkInterface) GetOutRateLimiter() *FirecrackerRateLimiter {
	if m != nil {
		return m.OutRateLimiter
	}
	return nil
}

func (m *FirecrackerNetworkInterface) GetCNIConfig() *CNIConfiguration {
	if m != nil {
		return m.CNIConfig
	}
	return nil
}

func (m *FirecrackerNetworkInterface) GetStaticConfig() *StaticNetworkConfiguration {
	if m != nil {
		return m.StaticConfig
	}
	return nil
}

// Message to specify CNI configuration that will be used to
// generate a network interface for a Firecracker VM
type CNIConfiguration struct {
	// NetworkName is the name of a CNI network (as found in CNI
	// configuration files) that will be used to generate the
	// network interface.
	NetworkName string `protobuf:"bytes,1,opt,name=NetworkName,json=networkName,proto3" json:"NetworkName,omitempty"`
	// InterfaceName corresponds to the CNI_IFNAME parameter that will be
	// provided to CNI plugins during invocation.
	InterfaceName string `protobuf:"bytes,2,opt,name=InterfaceName,json=interfaceName,proto3" json:"InterfaceName,omitempty"`
	// BinPath is a list of directories that will be searched when
	// looking for CNI plugin binaries. Defaults to just "/opt/cni/bin"
	BinPath []string `protobuf:"bytes,3,rep,name=BinPath,json=binPath,proto3" json:"BinPath,omitempty"`
	// ConfDir is the directory in which CNI configuration will be sought.
	// If not specified, will default to "/etc/cni/conf.d".
	ConfDir string `protobuf:"bytes,4,opt,name=ConfDir,json=confDir,proto3" json:"ConfDir,omitempty"`
	// CacheDir is the directory in which CNI results will be temporarily
	// cached by the runtime. If not specified, it will default to
	// "/var/lib/cni"
	CacheDir string `protobuf:"bytes,5,opt,name=CacheDir,json=cacheDir,proto3" json:"CacheDir,omitempty"`
	// Args corresponds to the CNI_ARGS parameter that will be provided to
	// CNI plugins on invocation.
	Args []*CNIConfiguration_CNIArg `protobuf:"bytes,6,rep,name=Args,json=args,proto3" json:"Args,omitempty"`
	// CapabilityArgs is a dictionary of capability-specific
	// data passed by the runtime to plugins as top-level keys in the
	// 'runtimeConfig' dictionary of the plugin's stdin data.
	CapabilityArgs       *_struct.Struct `protobuf:"bytes,7,opt,name=CapabilityArgs,json=capabilityArgs,proto3" json:"CapabilityArgs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CNIConfiguration) Reset()         { *m = CNIConfiguration{} }
func (m *CNIConfiguration) String() string { return proto.CompactTextString(m) }
func (*CNIConfiguration) ProtoMessage()    {}
func (*CNIConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{2}
}
func (m *CNIConfiguration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CNIConfiguration.Unmarshal(m, b)
}
func (m *CNIConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CNIConfiguration.Marshal(b, m, deterministic)
}
func (m *CNIConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CNIConfiguration.Merge(m, src)
}
func (m *CNIConfiguration) XXX_Size() int {
	return xxx_messageInfo_CNIConfiguration.Size(m)
}
func (m *CNIConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_CNIConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_CNIConfiguration proto.InternalMessageInfo

func (m *CNIConfiguration) GetNetworkName() string {
	if m != nil {
		return m.NetworkName
	}
	return ""
}

func (m *CNIConfiguration) GetInterfaceName() string {
	if m != nil {
		return m.InterfaceName
	}
	return ""
}

func (m *CNIConfiguration) GetBinPath() []string {
	if m != nil {
		return m.BinPath
	}
	return nil
}

func (m *CNIConfiguration) GetConfDir() string {
	if m != nil {
		return m.ConfDir
	}
	return ""
}

func (m *CNIConfiguration) GetCacheDir() string {
	if m != nil {
		return m.CacheDir
	}
	return ""
}

func (m *CNIConfiguration) GetArgs() []*CNIConfiguration_CNIArg {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *CNIConfiguration) GetCapabilityArgs() *_struct.Struct {
	if m != nil {
		return m.CapabilityArgs
	}
	return nil
}

type CNIConfiguration_CNIArg struct {
	Key                  string   `protobuf:"bytes,1,opt,name=Key,json=key,proto3" json:"Key,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=Value,json=value,proto3" json:"Value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CNIConfiguration_CNIArg) Reset()         { *m = CNIConfiguration_CNIArg{} }
func (m *CNIConfiguration_CNIArg) String() string { return proto.CompactTextString(m) }
func (*CNIConfiguration_CNIArg) ProtoMessage()    {}
func (*CNIConfiguration_CNIArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{2, 0}
}
func (m *CNIConfiguration_CNIArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CNIConfiguration_CNIArg.Unmarshal(m, b)
}
func (m *CNIConfiguration_CNIArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CNIConfiguration_CNIArg.Marshal(b, m, deterministic)
}
func (m *CNIConfiguration_CNIArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CNIConfiguration_CNIArg.Merge(m, src)
}
func (m *CNIConfiguration_CNIArg) XXX_Size() int {
	return xxx_messageInfo_CNIConfiguration_CNIArg.Size(m)
}
func (m *CNIConfiguration_CNIArg) XXX_DiscardUnknown() {
	xxx_messageInfo_CNIConfiguration_CNIArg.DiscardUnknown(m)
}

var xxx_messageInfo_CNIConfiguration_CNIArg proto.InternalMessageInfo

func (m *CNIConfiguration_CNIArg) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *CNIConfiguration_CNIArg) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Message to specify static configuration parameters for a
// Firecracker VM's network interface
type StaticNetworkConfiguration struct {
	MacAddress  string `protobuf:"bytes,1,opt,name=MacAddress,json=macAddress,proto3" json:"MacAddress,omitempty"`
	HostDevName string `protobuf:"bytes,2,opt,name=HostDevName,json=hostDevName,proto3" json:"HostDevName,omitempty"`
	// IPConfig optionally provides static IP configuration that will be configured
	// on the VM's internal networking interface. If not specified, no IP
	// configuration will be applied to the VM's internal nic automatically.
	IPConfig             *IPConfiguration `protobuf:"bytes,3,opt,name=IPConfig,json=iPConfig,proto3" json:"IPConfig,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *StaticNetworkConfiguration) Reset()         { *m = StaticNetworkConfiguration{} }
func (m *StaticNetworkConfiguration) String() string { return proto.CompactTextString(m) }
func (*StaticNetworkConfiguration) ProtoMessage()    {}
func (*StaticNetworkConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{3}
}
func (m *StaticNetworkConfiguration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StaticNetworkConfiguration.Unmarshal(m, b)
}
func (m *StaticNetworkConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StaticNetworkConfiguration.Marshal(b, m, deterministic)
}
func (m *StaticNetworkConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StaticNetworkConfiguration.Merge(m, src)
}
func (m *StaticNetworkConfiguration) XXX_Size() int {
	return xxx_messageInfo_StaticNetworkConfiguration.Size(m)
}
func (m *StaticNetworkConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_StaticNetworkConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_StaticNetworkConfiguration proto.InternalMessageInfo

func (m *StaticNetworkConfiguration) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func (m *StaticNetworkConfiguration) GetHostDevName() string {
	if m != nil {
		return m.HostDevName
	}
	return ""
}

func (m *StaticNetworkConfiguration) GetIPConfig() *IPConfiguration {
	if m != nil {
		return m.IPConfig
	}
	return nil
}

// Message to specify static IP configuration that will be
// applied to a Firecracker VM's network interface internally
type IPConfiguration struct {
	// PrimaryAddr specifies, in CIDR notation, the primary address
	// and subnet that a network interface will be assigned inside
	// the VM.
	PrimaryAddr string `protobuf:"bytes,1,opt,name=PrimaryAddr,json=primaryAddr,proto3" json:"PrimaryAddr,omitempty"`
	// GatewayAddr specifies the default gateway that a network interface
	// should use inside the VM.
	GatewayAddr string `protobuf:"bytes,3,opt,name=GatewayAddr,json=gatewayAddr,proto3" json:"GatewayAddr,omitempty"`
	// Nameservers is a list of nameservers that the VM will be configured
	// to use internally. Currently only up to 2 nameservers can be specified
	// (any more in the list will be ignored) and configuration is provided
	// to the VM via /proc/net/pnp.
	Nameservers          []string `protobuf:"bytes,4,rep,name=Nameservers,json=nameservers,proto3" json:"Nameservers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IPConfiguration) Reset()         { *m = IPConfiguration{} }
func (m *IPConfiguration) String() string { return proto.CompactTextString(m) }
func (*IPConfiguration) ProtoMessage()    {}
func (*IPConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{4}
}
func (m *IPConfiguration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPConfiguration.Unmarshal(m, b)
}
func (m *IPConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPConfiguration.Marshal(b, m, deterministic)
}
func (m *IPConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPConfiguration.Merge(m, src)
}
func (m *IPConfiguration) XXX_Size() int {
	return xxx_messageInfo_IPConfiguration.Size(m)
}
func (m *IPConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_IPConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_IPConfiguration proto.InternalMessageInfo

func (m *IPConfiguration) GetPrimaryAddr() string {
	if m != nil {
		return m.PrimaryAddr
	}
	return ""
}

func (m *IPConfiguration) GetGatewayAddr() string {
	if m != nil {
		return m.GatewayAddr
	}
	return ""
}

func (m *IPConfiguration) GetNameservers() []string {
	if m != nil {
		return m.Nameservers
	}
	return nil
}

// Message to set the machine config for a Firecracker VM
type FirecrackerMachineConfiguration struct {
	CPUTemplate string `protobuf:"bytes,1,opt,name=CPUTemplate,json=cPUTemplate,proto3" json:"CPUTemplate,omitempty"`
	HtEnabled   bool   `protobuf:"varint,2,opt,name=HtEnabled,json=htEnabled,proto3" json:"HtEnabled,omitempty"`
	// Specifies the memory size of VM
	// This lets us create a Firecracker VM of up to 4096 TiB, which
	// for a microVM should be large enough
	MemSizeMib           uint32   `protobuf:"varint,3,opt,name=MemSizeMib,json=memSizeMib,proto3" json:"MemSizeMib,omitempty"`
	VcpuCount            uint32   `protobuf:"varint,4,opt,name=VcpuCount,json=vcpuCount,proto3" json:"VcpuCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FirecrackerMachineConfiguration) Reset()         { *m = FirecrackerMachineConfiguration{} }
func (m *FirecrackerMachineConfiguration) String() string { return proto.CompactTextString(m) }
func (*FirecrackerMachineConfiguration) ProtoMessage()    {}
func (*FirecrackerMachineConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{5}
}
func (m *FirecrackerMachineConfiguration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FirecrackerMachineConfiguration.Unmarshal(m, b)
}
func (m *FirecrackerMachineConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FirecrackerMachineConfiguration.Marshal(b, m, deterministic)
}
func (m *FirecrackerMachineConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirecrackerMachineConfiguration.Merge(m, src)
}
func (m *FirecrackerMachineConfiguration) XXX_Size() int {
	return xxx_messageInfo_FirecrackerMachineConfiguration.Size(m)
}
func (m *FirecrackerMachineConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_FirecrackerMachineConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_FirecrackerMachineConfiguration proto.InternalMessageInfo

func (m *FirecrackerMachineConfiguration) GetCPUTemplate() string {
	if m != nil {
		return m.CPUTemplate
	}
	return ""
}

func (m *FirecrackerMachineConfiguration) GetHtEnabled() bool {
	if m != nil {
		return m.HtEnabled
	}
	return false
}

func (m *FirecrackerMachineConfiguration) GetMemSizeMib() uint32 {
	if m != nil {
		return m.MemSizeMib
	}
	return 0
}

func (m *FirecrackerMachineConfiguration) GetVcpuCount() uint32 {
	if m != nil {
		return m.VcpuCount
	}
	return 0
}

// Message to specify the block device config for a Firecracker VM
type FirecrackerRootDrive struct {
	// (Required) HostPath is the path on the host to the filesystem image or device
	// that will supply the rootfs of the VM.
	HostPath string `protobuf:"bytes,1,opt,name=HostPath,json=hostPath,proto3" json:"HostPath,omitempty"`
	// (Optional) If the HostPath points to a drive or image with multiple
	// partitions, Partuuid specifies which partition will be used to boot
	// the VM
	Partuuid string `protobuf:"bytes,2,opt,name=Partuuid,json=partuuid,proto3" json:"Partuuid,omitempty"`
	// (Optional) If set to true, IsWritable results in the VM Guest's rootfs
	// being mounted as read-write. Defaults to false, in which case the
	// rootfs is mounted as read-only.
	IsWritable bool `protobuf:"varint,3,opt,name=IsWritable,json=isWritable,proto3" json:"IsWritable,omitempty"`
	// (Optional) RateLimiter configuration that will be applied to the
	// backing-drive for the VM's rootfs
	RateLimiter          *FirecrackerRateLimiter `protobuf:"bytes,4,opt,name=RateLimiter,json=rateLimiter,proto3" json:"RateLimiter,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *FirecrackerRootDrive) Reset()         { *m = FirecrackerRootDrive{} }
func (m *FirecrackerRootDrive) String() string { return proto.CompactTextString(m) }
func (*FirecrackerRootDrive) ProtoMessage()    {}
func (*FirecrackerRootDrive) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{6}
}
func (m *FirecrackerRootDrive) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FirecrackerRootDrive.Unmarshal(m, b)
}
func (m *FirecrackerRootDrive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FirecrackerRootDrive.Marshal(b, m, deterministic)
}
func (m *FirecrackerRootDrive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirecrackerRootDrive.Merge(m, src)
}
func (m *FirecrackerRootDrive) XXX_Size() int {
	return xxx_messageInfo_FirecrackerRootDrive.Size(m)
}
func (m *FirecrackerRootDrive) XXX_DiscardUnknown() {
	xxx_messageInfo_FirecrackerRootDrive.DiscardUnknown(m)
}

var xxx_messageInfo_FirecrackerRootDrive proto.InternalMessageInfo

func (m *FirecrackerRootDrive) GetHostPath() string {
	if m != nil {
		return m.HostPath
	}
	return ""
}

func (m *FirecrackerRootDrive) GetPartuuid() string {
	if m != nil {
		return m.Partuuid
	}
	return ""
}

func (m *FirecrackerRootDrive) GetIsWritable() bool {
	if m != nil {
		return m.IsWritable
	}
	return false
}

func (m *FirecrackerRootDrive) GetRateLimiter() *FirecrackerRateLimiter {
	if m != nil {
		return m.RateLimiter
	}
	return nil
}

type FirecrackerDriveMount struct {
	// (Required) HostPath is the path on the host to the filesystem image or device
	// that will be mounted inside the VM.
	HostPath string `protobuf:"bytes,1,opt,name=HostPath,json=hostPath,proto3" json:"HostPath,omitempty"`
	// (Required) VMPath is the path inside the VM guest at which the filesystem
	// image or device will be mounted.
	VMPath string `protobuf:"bytes,2,opt,name=VMPath,json=vMPath,proto3" json:"VMPath,omitempty"`
	// (Required) FilesystemType is the filesystem type (i.e. ext4, xfs, etc.), as
	// used when mounting the filesystem image inside the VM. The VM guest kernel
	// is expected to have support for this filesystem.
	FilesystemType string `protobuf:"bytes,3,opt,name=FilesystemType,json=filesystemType,proto3" json:"FilesystemType,omitempty"`
	// (Optional) Options are fstab-style options that the mount will be performed
	// within the VM (i.e. ["rw", "noatime"]). Defaults to none if not specified.
	Options []string `protobuf:"bytes,4,rep,name=Options,json=options,proto3" json:"Options,omitempty"`
	// (Optional) RateLimiter configuration that will be applied to the
	// backing-drive for the VM's rootfs
	RateLimiter *FirecrackerRateLimiter `protobuf:"bytes,5,opt,name=RateLimiter,json=rateLimiter,proto3" json:"RateLimiter,omitempty"`
	// (Optional) If set to true, IsWritable results in the backing file for the
	// drive being opened as read-write by the Firecracker VMM on the host, allowing
	// writes to the image from within the guest. Defaults to false, in which case
	// the block device in the VM will be read-only.
	IsWritable           bool     `protobuf:"varint,6,opt,name=IsWritable,json=isWritable,proto3" json:"IsWritable,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FirecrackerDriveMount) Reset()         { *m = FirecrackerDriveMount{} }
func (m *FirecrackerDriveMount) String() string { return proto.CompactTextString(m) }
func (*FirecrackerDriveMount) ProtoMessage()    {}
func (*FirecrackerDriveMount) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{7}
}
func (m *FirecrackerDriveMount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FirecrackerDriveMount.Unmarshal(m, b)
}
func (m *FirecrackerDriveMount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FirecrackerDriveMount.Marshal(b, m, deterministic)
}
func (m *FirecrackerDriveMount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirecrackerDriveMount.Merge(m, src)
}
func (m *FirecrackerDriveMount) XXX_Size() int {
	return xxx_messageInfo_FirecrackerDriveMount.Size(m)
}
func (m *FirecrackerDriveMount) XXX_DiscardUnknown() {
	xxx_messageInfo_FirecrackerDriveMount.DiscardUnknown(m)
}

var xxx_messageInfo_FirecrackerDriveMount proto.InternalMessageInfo

func (m *FirecrackerDriveMount) GetHostPath() string {
	if m != nil {
		return m.HostPath
	}
	return ""
}

func (m *FirecrackerDriveMount) GetVMPath() string {
	if m != nil {
		return m.VMPath
	}
	return ""
}

func (m *FirecrackerDriveMount) GetFilesystemType() string {
	if m != nil {
		return m.FilesystemType
	}
	return ""
}

func (m *FirecrackerDriveMount) GetOptions() []string {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *FirecrackerDriveMount) GetRateLimiter() *FirecrackerRateLimiter {
	if m != nil {
		return m.RateLimiter
	}
	return nil
}

func (m *FirecrackerDriveMount) GetIsWritable() bool {
	if m != nil {
		return m.IsWritable
	}
	return false
}

// Message to specify an IO rate limiter with bytes/s and ops/s limits
type FirecrackerRateLimiter struct {
	Bandwidth            *FirecrackerTokenBucket `protobuf:"bytes,1,opt,name=Bandwidth,json=bandwidth,proto3" json:"Bandwidth,omitempty"`
	Ops                  *FirecrackerTokenBucket `protobuf:"bytes,2,opt,name=Ops,json=ops,proto3" json:"Ops,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *FirecrackerRateLimiter) Reset()         { *m = FirecrackerRateLimiter{} }
func (m *FirecrackerRateLimiter) String() string { return proto.CompactTextString(m) }
func (*FirecrackerRateLimiter) ProtoMessage()    {}
func (*FirecrackerRateLimiter) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{8}
}
func (m *FirecrackerRateLimiter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FirecrackerRateLimiter.Unmarshal(m, b)
}
func (m *FirecrackerRateLimiter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FirecrackerRateLimiter.Marshal(b, m, deterministic)
}
func (m *FirecrackerRateLimiter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirecrackerRateLimiter.Merge(m, src)
}
func (m *FirecrackerRateLimiter) XXX_Size() int {
	return xxx_messageInfo_FirecrackerRateLimiter.Size(m)
}
func (m *FirecrackerRateLimiter) XXX_DiscardUnknown() {
	xxx_messageInfo_FirecrackerRateLimiter.DiscardUnknown(m)
}

var xxx_messageInfo_FirecrackerRateLimiter proto.InternalMessageInfo

func (m *FirecrackerRateLimiter) GetBandwidth() *FirecrackerTokenBucket {
	if m != nil {
		return m.Bandwidth
	}
	return nil
}

func (m *FirecrackerRateLimiter) GetOps() *FirecrackerTokenBucket {
	if m != nil {
		return m.Ops
	}
	return nil
}

// Message to specify a token buicket used to rate limit disk and network IO for a Firecracker VM
type FirecrackerTokenBucket struct {
	OneTimeBurst         int64    `protobuf:"varint,1,opt,name=OneTimeBurst,json=oneTimeBurst,proto3" json:"OneTimeBurst,omitempty"`
	RefillTime           int64    `protobuf:"varint,2,opt,name=RefillTime,json=refillTime,proto3" json:"RefillTime,omitempty"`
	Capacity             int64    `protobuf:"varint,3,opt,name=Capacity,json=capacity,proto3" json:"Capacity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FirecrackerTokenBucket) Reset()         { *m = FirecrackerTokenBucket{} }
func (m *FirecrackerTokenBucket) String() string { return proto.CompactTextString(m) }
func (*FirecrackerTokenBucket) ProtoMessage()    {}
func (*FirecrackerTokenBucket) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{9}
}
func (m *FirecrackerTokenBucket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FirecrackerTokenBucket.Unmarshal(m, b)
}
func (m *FirecrackerTokenBucket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FirecrackerTokenBucket.Marshal(b, m, deterministic)
}
func (m *FirecrackerTokenBucket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirecrackerTokenBucket.Merge(m, src)
}
func (m *FirecrackerTokenBucket) XXX_Size() int {
	return xxx_messageInfo_FirecrackerTokenBucket.Size(m)
}
func (m *FirecrackerTokenBucket) XXX_DiscardUnknown() {
	xxx_messageInfo_FirecrackerTokenBucket.DiscardUnknown(m)
}

var xxx_messageInfo_FirecrackerTokenBucket proto.InternalMessageInfo

func (m *FirecrackerTokenBucket) GetOneTimeBurst() int64 {
	if m != nil {
		return m.OneTimeBurst
	}
	return 0
}

func (m *FirecrackerTokenBucket) GetRefillTime() int64 {
	if m != nil {
		return m.RefillTime
	}
	return 0
}

func (m *FirecrackerTokenBucket) GetCapacity() int64 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

type FirecrackerBalloonDevice struct {
	AmountMib             int64    `protobuf:"varint,1,opt,name=AmountMib,json=amountMib,proto3" json:"AmountMib,omitempty"`
	DeflateOnOom          bool     `protobuf:"varint,2,opt,name=DeflateOnOom,json=deflateOnOom,proto3" json:"DeflateOnOom,omitempty"`
	StatsPollingIntervals int64    `protobuf:"varint,3,opt,name=StatsPollingIntervals,json=statsPollingIntervals,proto3" json:"StatsPollingIntervals,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *FirecrackerBalloonDevice) Reset()         { *m = FirecrackerBalloonDevice{} }
func (m *FirecrackerBalloonDevice) String() string { return proto.CompactTextString(m) }
func (*FirecrackerBalloonDevice) ProtoMessage()    {}
func (*FirecrackerBalloonDevice) Descriptor() ([]byte, []int) {
	return fileDescriptor_d938547f84707355, []int{10}
}
func (m *FirecrackerBalloonDevice) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FirecrackerBalloonDevice.Unmarshal(m, b)
}
func (m *FirecrackerBalloonDevice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FirecrackerBalloonDevice.Marshal(b, m, deterministic)
}
func (m *FirecrackerBalloonDevice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirecrackerBalloonDevice.Merge(m, src)
}
func (m *FirecrackerBalloonDevice) XXX_Size() int {
	return xxx_messageInfo_FirecrackerBalloonDevice.Size(m)
}
func (m *FirecrackerBalloonDevice) XXX_DiscardUnknown() {
	xxx_messageInfo_FirecrackerBalloonDevice.DiscardUnknown(m)
}

var xxx_messageInfo_FirecrackerBalloonDevice proto.InternalMessageInfo

func (m *FirecrackerBalloonDevice) GetAmountMib() int64 {
	if m != nil {
		return m.AmountMib
	}
	return 0
}

func (m *FirecrackerBalloonDevice) GetDeflateOnOom() bool {
	if m != nil {
		return m.DeflateOnOom
	}
	return false
}

func (m *FirecrackerBalloonDevice) GetStatsPollingIntervals() int64 {
	if m != nil {
		return m.StatsPollingIntervals
	}
	return 0
}

func init() {
	proto.RegisterType((*ExtraData)(nil), "ExtraData")
	proto.RegisterType((*FirecrackerNetworkInterface)(nil), "FirecrackerNetworkInterface")
	proto.RegisterType((*CNIConfiguration)(nil), "CNIConfiguration")
	proto.RegisterType((*CNIConfiguration_CNIArg)(nil), "CNIConfiguration.CNIArg")
	proto.RegisterType((*StaticNetworkConfiguration)(nil), "StaticNetworkConfiguration")
	proto.RegisterType((*IPConfiguration)(nil), "IPConfiguration")
	proto.RegisterType((*FirecrackerMachineConfiguration)(nil), "FirecrackerMachineConfiguration")
	proto.RegisterType((*FirecrackerRootDrive)(nil), "FirecrackerRootDrive")
	proto.RegisterType((*FirecrackerDriveMount)(nil), "FirecrackerDriveMount")
	proto.RegisterType((*FirecrackerRateLimiter)(nil), "FirecrackerRateLimiter")
	proto.RegisterType((*FirecrackerTokenBucket)(nil), "FirecrackerTokenBucket")
	proto.RegisterType((*FirecrackerBalloonDevice)(nil), "FirecrackerBalloonDevice")
}

func init() { proto.RegisterFile("types.proto", fileDescriptor_d938547f84707355) }

var fileDescriptor_d938547f84707355 = []byte{
	// 983 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xdd, 0x6e, 0xe3, 0xc4,
	0x17, 0x97, 0xeb, 0x26, 0xb1, 0xc7, 0x69, 0xfe, 0xfd, 0x8f, 0xda, 0x25, 0x74, 0x57, 0x10, 0x59,
	0x08, 0x05, 0x69, 0x95, 0xa2, 0xf2, 0x21, 0x71, 0x81, 0x56, 0xf9, 0xd8, 0x65, 0x03, 0xa4, 0x89,
	0x9c, 0x52, 0x24, 0xee, 0x26, 0xce, 0x24, 0x19, 0x62, 0xcf, 0x58, 0x33, 0xe3, 0x64, 0xbd, 0xcf,
	0xc0, 0x15, 0x2f, 0xc0, 0x35, 0x17, 0x3c, 0x02, 0x4f, 0xc0, 0x8b, 0xf0, 0x18, 0x68, 0xc6, 0xe3,
	0xc4, 0xc9, 0x96, 0x8a, 0x2b, 0xeb, 0xfc, 0x7e, 0xe7, 0xcc, 0xf9, 0x3e, 0x06, 0x9e, 0xcc, 0x12,
	0x2c, 0x3a, 0x09, 0x67, 0x92, 0x5d, 0xbd, 0xbf, 0x64, 0x6c, 0x19, 0xe1, 0x6b, 0x2d, 0xcd, 0xd2,
	0xc5, 0x35, 0xa2, 0x99, 0xa1, 0x9e, 0x1d, 0x53, 0x42, 0xf2, 0x34, 0x94, 0x39, 0xeb, 0xff, 0x69,
	0x01, 0xf7, 0xe5, 0x1b, 0xc9, 0xd1, 0x00, 0x49, 0x04, 0xaf, 0x80, 0xf3, 0xad, 0x60, 0x74, 0x9a,
	0xe0, 0xb0, 0x69, 0xb5, 0xac, 0x76, 0x3d, 0x70, 0x7e, 0x36, 0x32, 0xfc, 0x12, 0x78, 0x41, 0x4a,
	0xc3, 0x71, 0x22, 0x09, 0xa3, 0xa2, 0x79, 0xd2, 0xb2, 0xda, 0xde, 0xcd, 0x45, 0x27, 0x7f, 0xbd,
	0x53, 0xbc, 0xde, 0xe9, 0xd2, 0x2c, 0xf0, 0xf8, 0x5e, 0x11, 0x3e, 0x03, 0xee, 0x54, 0xce, 0x09,
	0x9d, 0x30, 0x2e, 0x9b, 0x76, 0xcb, 0x6a, 0x9f, 0x05, 0xae, 0x28, 0x00, 0xf8, 0x01, 0x00, 0x53,
	0x39, 0x67, 0xa9, 0xd4, 0xf4, 0xa9, 0xa6, 0x81, 0xd8, 0x21, 0x86, 0xc7, 0x9c, 0x6b, 0xbe, 0xb2,
	0xe3, 0x0d, 0xe2, 0xff, 0x71, 0x02, 0x9e, 0xbe, 0x22, 0x1c, 0x87, 0x1c, 0x85, 0x6b, 0xcc, 0x6f,
	0xb1, 0xdc, 0x32, 0xbe, 0x1e, 0x52, 0x89, 0xf9, 0x02, 0x85, 0x58, 0x79, 0xef, 0x46, 0x11, 0xdb,
	0x8e, 0x46, 0x83, 0xa9, 0x4e, 0xc9, 0x09, 0x5c, 0x54, 0x00, 0xf0, 0x6b, 0x70, 0x36, 0xa4, 0x01,
	0x92, 0xf8, 0x7b, 0x12, 0x13, 0x89, 0xb9, 0xc9, 0xea, 0xbd, 0x4e, 0xe9, 0xc9, 0x12, 0x1d, 0x9c,
	0x91, 0xb2, 0x36, 0x7c, 0x01, 0x1a, 0xe3, 0x54, 0x96, 0xed, 0xed, 0xc7, 0xed, 0x1b, 0xec, 0x40,
	0x1d, 0x5e, 0x03, 0xb7, 0x7f, 0x3b, 0xec, 0x33, 0xba, 0x20, 0x4b, 0x9d, 0xbc, 0x77, 0xf3, 0xff,
	0xce, 0x0e, 0x49, 0x39, 0x52, 0x25, 0x0c, 0xdc, 0xb0, 0x40, 0xe0, 0x0b, 0x50, 0x9f, 0x4a, 0x24,
	0x49, 0x68, 0x6c, 0x2a, 0xda, 0xe6, 0x69, 0x27, 0x07, 0x4d, 0xf6, 0x87, 0xd6, 0x75, 0x51, 0x32,
	0xf0, 0xff, 0x3a, 0x01, 0xe7, 0xc7, 0x0e, 0x60, 0x0b, 0x78, 0xc6, 0xf4, 0x16, 0xc5, 0x58, 0x97,
	0xc9, 0x0d, 0x3c, 0xba, 0x87, 0xe0, 0x47, 0xaa, 0x50, 0xa6, 0xa6, 0x5a, 0xe7, 0x44, 0xeb, 0x9c,
	0x91, 0x32, 0x08, 0x9b, 0xa0, 0xd6, 0x23, 0x74, 0x82, 0xe4, 0xaa, 0x69, 0xb7, 0xec, 0xb6, 0x1b,
	0xd4, 0x66, 0xb9, 0xa8, 0x18, 0xe5, 0x72, 0x40, 0xb8, 0x4e, 0xd3, 0x0d, 0x6a, 0x61, 0x2e, 0xaa,
	0x91, 0xeb, 0xa3, 0x70, 0x85, 0x15, 0x55, 0xd1, 0x94, 0x13, 0x1a, 0x19, 0x3e, 0x07, 0xa7, 0x5d,
	0xbe, 0x14, 0xcd, 0x6a, 0xcb, 0x6e, 0x7b, 0x37, 0xcd, 0x77, 0x2a, 0xa3, 0x80, 0x2e, 0x5f, 0x06,
	0xa7, 0x88, 0x2f, 0x85, 0xea, 0x46, 0x1f, 0x25, 0x68, 0x46, 0x22, 0x22, 0x33, 0x6d, 0x57, 0x33,
	0xdd, 0x38, 0x9e, 0xd1, 0xa9, 0xde, 0x80, 0xa0, 0x11, 0x1e, 0xa8, 0x5f, 0x7d, 0x0a, 0xaa, 0xf9,
	0x83, 0xf0, 0x1c, 0xd8, 0xdf, 0xe1, 0xcc, 0x14, 0xc2, 0x5e, 0xe3, 0x0c, 0x5e, 0x80, 0xca, 0x3d,
	0x8a, 0xd2, 0x22, 0xf1, 0xca, 0x46, 0x09, 0xfe, 0x2f, 0x16, 0xb8, 0xfa, 0xf7, 0xd2, 0xab, 0xe1,
	0x1d, 0xa1, 0xb0, 0x3b, 0x9f, 0x73, 0x2c, 0x84, 0x79, 0x0d, 0xc4, 0x3b, 0x44, 0xd5, 0xfd, 0x35,
	0x13, 0x72, 0x80, 0x37, 0xa5, 0x9a, 0x7a, 0xab, 0x3d, 0x04, 0x9f, 0x03, 0x67, 0x38, 0x31, 0xbd,
	0xce, 0x67, 0xeb, 0xbc, 0x53, 0x00, 0x45, 0x83, 0x1d, 0x62, 0x00, 0x7f, 0x0b, 0xfe, 0x77, 0x44,
	0x2a, 0x17, 0x13, 0x4e, 0x62, 0xc4, 0x33, 0xe5, 0xb4, 0x68, 0x6d, 0xb2, 0x87, 0x94, 0xc6, 0x37,
	0x48, 0xe2, 0x2d, 0xca, 0x35, 0xec, 0x5c, 0x63, 0xb9, 0x87, 0xf4, 0x78, 0xa0, 0x18, 0x0b, 0xcc,
	0x37, 0x98, 0x8b, 0xe6, 0xa9, 0x6e, 0xad, 0x47, 0xf7, 0x90, 0xff, 0x9b, 0x05, 0x3e, 0x2c, 0x8d,
	0xfc, 0x08, 0x85, 0x2b, 0x42, 0xf1, 0x3b, 0x91, 0xf4, 0x27, 0x3f, 0xdc, 0xe1, 0x38, 0x89, 0x90,
	0xdc, 0x0d, 0x59, 0xb8, 0x87, 0xd4, 0xae, 0xbe, 0x96, 0x2f, 0x29, 0x9a, 0x45, 0x78, 0xae, 0x8b,
	0xe1, 0x04, 0xee, 0xaa, 0x00, 0x74, 0x31, 0x71, 0x3c, 0x25, 0x6f, 0xf1, 0x88, 0xcc, 0xcc, 0x21,
	0x01, 0xf1, 0x0e, 0x51, 0xd6, 0xf7, 0x61, 0x92, 0xf6, 0x59, 0x4a, 0x8b, 0x43, 0xe2, 0x6e, 0x0a,
	0xc0, 0xff, 0xdd, 0x02, 0x17, 0xe5, 0xa5, 0x64, 0x4c, 0x0e, 0x38, 0xd9, 0x60, 0x35, 0x7f, 0xaa,
	0x07, 0x7a, 0x68, 0xf3, 0x98, 0x9c, 0x95, 0x91, 0x15, 0x37, 0x41, 0x5c, 0xa6, 0x29, 0x99, 0x9b,
	0xe6, 0x38, 0x89, 0x91, 0x55, 0x38, 0x43, 0xf1, 0x23, 0x27, 0x52, 0x45, 0xa7, 0xc3, 0x71, 0x02,
	0x40, 0x76, 0x08, 0xfc, 0x0a, 0x78, 0xe5, 0xc3, 0x70, 0xfa, 0xf8, 0x61, 0xf0, 0xf8, 0x5e, 0xf0,
	0xff, 0xb6, 0xc0, 0x65, 0x49, 0x4f, 0xc7, 0x39, 0x52, 0x59, 0x3c, 0x1a, 0xec, 0x13, 0x50, 0xbd,
	0x1f, 0x69, 0x26, 0x0f, 0xb5, 0xba, 0xd1, 0x12, 0xfc, 0x18, 0x34, 0x5e, 0x91, 0x08, 0x8b, 0x4c,
	0x48, 0x1c, 0xdf, 0x65, 0x09, 0x36, 0x2d, 0x6e, 0x2c, 0x0e, 0x50, 0xb5, 0xa2, 0xc5, 0x6d, 0xcf,
	0x3b, 0x5c, 0x63, 0xe6, 0x82, 0x1f, 0xa5, 0x52, 0xf9, 0xef, 0xa9, 0x1c, 0x55, 0xa9, 0x7a, 0x5c,
	0x25, 0xff, 0x2d, 0x78, 0xf2, 0xf0, 0x33, 0xf0, 0x0b, 0xe0, 0xf6, 0x10, 0x9d, 0x6f, 0xc9, 0xdc,
	0xe4, 0x7a, 0xe4, 0xf2, 0x8e, 0xad, 0x31, 0xed, 0xa5, 0xe1, 0x1a, 0xcb, 0xc0, 0x9d, 0x15, 0x9a,
	0xf0, 0x13, 0x60, 0x8f, 0x13, 0xf1, 0xd0, 0x1d, 0x2f, 0x1b, 0xd8, 0x2c, 0x11, 0xfe, 0x9b, 0x03,
	0xdf, 0x25, 0x1a, 0xfa, 0xa0, 0x3e, 0xa6, 0xf8, 0x8e, 0xc4, 0xb8, 0x97, 0x72, 0x21, 0xb5, 0x7b,
	0x3b, 0xa8, 0xb3, 0x12, 0xa6, 0x32, 0x0b, 0xf0, 0x82, 0x44, 0x91, 0x82, 0xb4, 0x3f, 0x3b, 0x00,
	0x7c, 0x87, 0xe4, 0x77, 0x2d, 0x41, 0x21, 0x91, 0x99, 0x2e, 0xb8, 0xad, 0xee, 0x5a, 0x2e, 0xfb,
	0xbf, 0x5a, 0xa0, 0x59, 0x72, 0xdd, 0x53, 0x3f, 0x24, 0x46, 0x07, 0x78, 0x43, 0xcc, 0x1f, 0x2b,
	0x56, 0xdd, 0x56, 0x63, 0x9e, 0x7b, 0x76, 0x51, 0x01, 0xa8, 0xd0, 0x06, 0x78, 0xa1, 0xd6, 0x65,
	0x4c, 0xc7, 0x2c, 0x36, 0x6b, 0x52, 0x9f, 0x97, 0x30, 0xf8, 0x39, 0xb8, 0x54, 0x47, 0x49, 0x4c,
	0x58, 0x14, 0x11, 0xba, 0xd4, 0x87, 0x7b, 0x83, 0x22, 0x61, 0xe2, 0xb8, 0x14, 0x0f, 0x91, 0xbd,
	0xda, 0x4f, 0x95, 0xfc, 0x40, 0x56, 0xf5, 0xe7, 0xb3, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xe3,
	0xe2, 0x32, 0xc9, 0x61, 0x08, 0x00, 0x00,
}
